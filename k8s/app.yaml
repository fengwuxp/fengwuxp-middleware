apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${K8S_NAMESPACE}
  name: ${SPRING_APPLICATION_NAME}
  labels:
    application: ${SPRING_APPLICATION_NAME}
    env: ${SPRING_PROFILE_ACTIVE}
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      application: ${SPRING_APPLICATION_NAME}
      env: ${SPRING_PROFILE_ACTIVE}
  template:
    metadata:
      labels:
        application: ${SPRING_APPLICATION_NAME}
        env: ${SPRING_PROFILE_ACTIVE}
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8899"
        prometheus.io/scrape: "true"
    spec:
      terminationGracePeriodSeconds: 45
      containers:
        - name: ${SPRING_APPLICATION_NAME}
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME  # pod name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP   # pod ip
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SPRING_APPLICATION_NAME     # 应用名称
              value: "${SPRING_APPLICATION_NAME}"
            - name: SPRING_PROFILES_ACTIVE       # 指定激活环境
              value: "${SPRING_PROFILE_ACTIVE}"
            - name: SERVER_PORT
              value: "8080"
            - name: MANAGEMENT_SERVER_PORT
              value: "8899"
            - name: JAVA_OPTS
              value: "${JAVA_OPTS}"
            - name: SPRING_CLOUD_OPTS
              value: "${SPRING_CLOUD_OPTS} -Dspring.profiles.active=${SPRING_PROFILE_ACTIVE}"
            - name: TZ
              value: ${TIME_ZONE}
          resources: # 容器资源管理
            limits: # 资源限制（监控使用情况）
              cpu: "${LIMIT_CPU}"
              memory: "${LIMIT_MEMORY}"
            requests: # 最小可用资源（灵活调度）
              cpu: "${REQUEST_CPU}"
              memory: "${REQUEST_MEMORY}"
          ports:
            - containerPort: 8080
          lifecycle:
            preStop:
              exec:
                # 执行优雅停机脚本
                command: [ "/bin/bash","-c","/home/admin/run/pre-stop.sh" ]
          startupProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8899
            failureThreshold: 10
            timeoutSeconds: 1
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe: # 就绪探针
            httpGet:
              path: /actuator/health/readiness
              port: 8899
            initialDelaySeconds: 10      # 延迟加载时间
            periodSeconds: 3             # 重试时间间隔
            timeoutSeconds: 1            # 超时时间设置
            successThreshold: 1          # 健康阈值
            failureThreshold: 3         # 不健康阈值
          livenessProbe: # 存活探针
            httpGet:
              path: /actuator/health/liveness
              port: 8899
            initialDelaySeconds: 10      # 延迟加载时间
            periodSeconds: 10             # 重试时间间隔
            timeoutSeconds: 1            # 超时时间设置
            successThreshold: 1          # 健康阈值
            failureThreshold: 5          # 不健康阈值